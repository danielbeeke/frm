diff --git a/node_modules/ldflex/lib/SparqlHandler.js b/node_modules/ldflex/lib/SparqlHandler.js
index f766c31..0a39bc4 100644
--- a/node_modules/ldflex/lib/SparqlHandler.js
+++ b/node_modules/ldflex/lib/SparqlHandler.js
@@ -82,7 +82,7 @@ class SparqlHandler {
     let subject, where; // If the only condition is a subject, we need no WHERE clause
 
     if (conditions.length === 1) {
-      subject = this.termToString(conditions[0].subject);
+      subject = this.termToString(skolemize(conditions[0].subject));
       where = [];
     } // Otherwise, create a WHERE clause from all conditions
     else {
diff --git a/node_modules/ldflex/module/SparqlHandler.js b/node_modules/ldflex/module/SparqlHandler.js
index 6c64ad7..2896ca7 100644
--- a/node_modules/ldflex/module/SparqlHandler.js
+++ b/node_modules/ldflex/module/SparqlHandler.js
@@ -74,7 +74,7 @@ export default class SparqlHandler {
     let subject, where; // If the only condition is a subject, we need no WHERE clause
 
     if (conditions.length === 1) {
-      subject = this.termToString(conditions[0].subject);
+      subject = this.termToString(skolemize(conditions[0].subject));
       where = [];
     } // Otherwise, create a WHERE clause from all conditions
     else {
@@ -95,7 +95,7 @@ export default class SparqlHandler {
       objects
     } of predicateObjects) {
       // Mutate either only the specified objects, or all of them
-      const objectStrings = objects ? objects.map(o => this.termToString(o)) : [this.createVar(predicate.value, scope)]; // Generate a triple pattern for all subjects
+      const objectStrings = objects ? objects.map(o => this.termToString(skolemize(o))) : [this.createVar(predicate.value, scope)]; // Generate a triple pattern for all subjects
 
       mutations.push(...this.triplePatterns(subject, predicate, objectStrings, reverse));
     }
